// <auto-generated />
using System;
using Atm.Atendimento.Dados;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Atm.Atendimento.Dados.Migrations
{
    [DbContext(typeof(DbContext))]
    partial class DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Atm.Atendimento.Domain.CustoServico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("OrcamentoId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ServicoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrcamentoId");

                    b.HasIndex("ServicoId");

                    b.ToTable("CustoServico");
                });

            modelBuilder.Entity("Atm.Atendimento.Domain.Orcamento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CarroId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAgendamento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataHoraFim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataHoraInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Desconto")
                        .HasColumnType("numeric");

                    b.Property<string>("Descricao")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<double?>("Duracao")
                        .HasColumnType("double precision");

                    b.Property<int[]>("ModoPagamento")
                        .HasColumnType("integer[]");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("ValorFinal")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CarroId");

                    b.HasIndex("ClienteId");

                    b.ToTable("Orcamento");
                });

            modelBuilder.Entity("Atm.Atendimento.Domain.Peca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<Guid?>("OrcamentoId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ValorCobrado")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("OrcamentoId");

                    b.ToTable("Peca");
                });

            modelBuilder.Entity("Atm.Atendimento.Domain.Servico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CustoServicoAtual")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DataAtualizacao")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DataCadastro")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Descricao")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("ValorAtual")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Servico");
                });

            modelBuilder.Entity("Atm.Atendimento.Dto.Carro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Carro");
                });

            modelBuilder.Entity("Atm.Atendimento.Dto.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("Atm.Atendimento.Dto.Produto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrcamentoId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrcamentoId");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("Atm.Atendimento.Domain.CustoServico", b =>
                {
                    b.HasOne("Atm.Atendimento.Domain.Orcamento", "Orcamento")
                        .WithMany("CustoServicos")
                        .HasForeignKey("OrcamentoId");

                    b.HasOne("Atm.Atendimento.Domain.Servico", "Servico")
                        .WithMany("CustoServico")
                        .HasForeignKey("ServicoId");

                    b.Navigation("Orcamento");

                    b.Navigation("Servico");
                });

            modelBuilder.Entity("Atm.Atendimento.Domain.Orcamento", b =>
                {
                    b.HasOne("Atm.Atendimento.Dto.Carro", "Carro")
                        .WithMany()
                        .HasForeignKey("CarroId");

                    b.HasOne("Atm.Atendimento.Dto.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.Navigation("Carro");

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Atm.Atendimento.Domain.Peca", b =>
                {
                    b.HasOne("Atm.Atendimento.Domain.Orcamento", "Orcamento")
                        .WithMany("Pecas")
                        .HasForeignKey("OrcamentoId");

                    b.Navigation("Orcamento");
                });

            modelBuilder.Entity("Atm.Atendimento.Dto.Produto", b =>
                {
                    b.HasOne("Atm.Atendimento.Domain.Orcamento", "Orcamento")
                        .WithMany("Produtos")
                        .HasForeignKey("OrcamentoId");

                    b.Navigation("Orcamento");
                });

            modelBuilder.Entity("Atm.Atendimento.Domain.Orcamento", b =>
                {
                    b.Navigation("CustoServicos");

                    b.Navigation("Pecas");

                    b.Navigation("Produtos");
                });

            modelBuilder.Entity("Atm.Atendimento.Domain.Servico", b =>
                {
                    b.Navigation("CustoServico");
                });
#pragma warning restore 612, 618
        }
    }
}
